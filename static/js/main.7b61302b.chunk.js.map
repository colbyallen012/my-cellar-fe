{"version":3,"sources":["ApiCalls/ApiCalls.js","WineForm/WineForm.js","Vino/Vino.js","Wines/Wines.js","App/App.js","serviceWorker.js","index.js"],"names":["fetchWines","fetch","then","res","json","catch","error","message","postWine","wine","options","method","body","JSON","stringify","headers","data","deleteWine","WineForm","props","handleChange","e","target","name","value","setState","handleSubmit","a","async","preventDefault","state","getWines","vineyard","color","type","year","rating","className","onSubmit","this","placeholder","onChange","Component","Vino","id","removeVino","onClick","Wines","wines","wineCards","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b61302b.chunk.js","sourcesContent":["export const fetchWines = () => {\n  return fetch('https://the-vino-cellar.herokuapp.com/api/v1/vinos')\n    .then(res => res.json())\n    .then(res => res)\n    .catch(error => error.message)\n}\n\nexport const postWine = (wine) => {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(wine),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  return fetch('https://the-vino-cellar.herokuapp.com/api/v1/vinos', options)\n    .then(res => res.json())\n    .then(data => data)\n    .catch(error => error.message)\n}\n\nexport const deleteWine = (wine) => {\n  const options = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  return fetch(`https://the-vino-cellar.herokuapp.com/api/v1/vinos/${wine}`, options)\n    .then(res => res.json())\n    .then(data => data)\n    .catch(error => error.message)\n}","import React, { Component } from 'react';\nimport { postWine } from '../ApiCalls/ApiCalls';\nimport './WineForm.css';\n\nexport class WineForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      vineyard: '',\n      name: '',\n      color: '',\n      type: '',\n      year: '',\n      rating: '',\n    }\n  }\n\n  handleChange = (e) => {\n    const {name, value} = e.target;\n    this.setState({ [name]: value})\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault()\n    await postWine(this.state)\n    this.props.getWines()\n    this.setState({vineyard: '', name: '', color: '', type: '', year: '', rating: ''})\n  }\n\n  render() {\n    return(\n      <div className='WineForm'>\n        <h2 className='add-wine'>Add Wine</h2>\n        <form className='wine-input' onSubmit={this.handleSubmit}>\n          <input\n            type='text'\n            value={this.state.vineyard}\n            name='vineyard'\n            placeholder='Vineyard'\n            onChange={this.handleChange}\n          />\n          <input\n            type='text'\n            value={this.state.name}\n            name='name'\n            placeholder='Bottle Name'\n            onChange={this.handleChange}\n          />\n          <input\n            type='text'\n            value={this.state.color}\n            name='color'\n            placeholder='Color'\n            onChange={this.handleChange}\n          />\n          <input\n            type='text'\n            value={this.state.type}\n            name='type'\n            placeholder='Type'\n            onChange={this.handleChange}\n          />\n          <input\n            type='number'\n            value={this.state.year}\n            name='year'\n            placeholder='Year'\n            onChange={this.handleChange}\n          />\n          <input\n            type='number'\n            value={this.state.rating}\n            name='rating'\n            placeholder='Rating'\n            onChange={this.handleChange}\n          />\n          <button className='add'>Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default WineForm","import React from 'react';\nimport './Vino.css'\n\nconst Vino = ({id, vineyard, name, color, type, year, rating, removeVino}) => {\n  return (\n    <div className='vino'>\n      <h3 className='vineyard'>{vineyard}</h3>\n      <h4 className='name'>{name}</h4>\n      <p className='color'>{color}</p>\n      <p className='type'>{type}</p>\n      <p className='year'>Year: {year}</p>\n      <p className='rating'>Rating: {rating}</p>\n      <button className='delete' onClick={() => removeVino(id)}>Delete Wine</button>\n    </div>\n  )\n}\n\nexport default Vino;","import React from 'react';\nimport Vino from '../Vino/Vino'\nimport './Wines.css'\n\nconst Wines = ({wines, removeVino}) => {\n  const wineCards = wines.map(wine => {\n    return <Vino\n      id={wine.id} \n      vineyard={wine.vineyard}\n      name={wine.name}\n      color={wine.color}\n      type={wine.type}\n      year={wine.year}\n      rating={wine.rating}\n      removeVino={removeVino}\n    />\n  })\n\n  return (\n    <div className='wines'>\n      <h2 className='wine'>Your Cellar</h2>\n      <section className='wine-container'>\n        {wineCards}\n      </section>\n    </div>\n  )\n}\n\nexport default Wines;","import React, {Component} from 'react';\nimport { fetchWines, deleteWine} from '../ApiCalls/ApiCalls'\nimport WineForm from '../WineForm/WineForm.js'\nimport Wines from '../Wines/Wines.js'\nimport './App.css';\n\nexport class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      wines: []\n    }\n  }\n\n  componentDidMount () {\n    this.getWines()\n  }\n\n  getWines = async () => {\n    await fetchWines()\n      .then(wines => this.setState({wines: wines}))\n      .catch(error => error.message)\n  }\n\n  removeVino = async (id) => {\n    await deleteWine(id)\n    this.getWines()\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <h1>Vino Cellar</h1>\n        <section>\n          <WineForm getWines={this.getWines}/>\n          <Wines wines={this.state.wines} removeVino={this.removeVino}/>\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}